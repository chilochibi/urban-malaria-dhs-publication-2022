user = Sys.getenv("USERNAME")
Drive = file.path(gsub("[\\]", "/", gsub("Documents", "", Sys.getenv("HOME"))))
NuDir = file.path(Drive, "Box", "NU-malaria-team")
ProjectDir = file.path(NuDir, 'data', 'nigeria_dhs' , 'data_analysis')
DataDir = file.path(ProjectDir, "data")
DHSData = file.path(DataDir, 'DHS')
DataIn = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'DHS_survey_extract')
ResultDir =file.path(ProjectDir, "results", "research_plots")
HisDir =file.path(ResultDir, "histograms")
MapsDir = file.path(ResultDir, "maps")
GeoDir <- file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'geospatial_covariates')
CsvDir = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'cleaned_cluster_covariates_all', 'New_082321')
# ----------------------------------------------------
### Required functions and settings
## ----------------------------------------------------
source("./other_functions/descriptive_analysis_functions.R")
ProjectDir = file.path(NuDir, 'data', 'nigeria','nigeria_dhs' , 'data_analysis')
DataDir = file.path(ProjectDir, "data")
DHSData = file.path(DataDir, 'DHS')
DataIn = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'DHS_survey_extract')
ResultDir =file.path(ProjectDir, "results", "research_plots")
HisDir =file.path(ResultDir, "histograms")
MapsDir = file.path(ResultDir, "maps")
GeoDir <- file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'geospatial_covariates')
CsvDir = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'cleaned_cluster_covariates_all', 'New_082321')
# ----------------------------------------------------
### Required functions and settings
## ----------------------------------------------------
source("./other_functions/descriptive_analysis_functions.R")
## ----------------------------------------------------------------
### Read in computed DHS cluster data and generate related figures
## ----------------------------------------------------------------
#read in dhs file
dhs = read.csv(file.path(CsvDir, "all_DHS_variables_urban_malaria.csv"), header = T, sep = ',') %>% dplyr::select(-X)
# # Reading in the necessary packages
list.of.packages <- c("tidyverse", "survey", "haven", "ggplot2", "purrr", "summarytools", "stringr", "sp", "rgdal", "raster",
"lubridate", "sf", "labelled","scales",  "raster", "rlist", 'rgeos', 'ggpubr',
'cowplot', 'gridExtra', 'lme4', 'ggsci', 'patchwork', 'ggcorrplot', 'pscl', 'visreg', 'viridis', 'splines', 'shades')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, library, character.only = TRUE) #applying the library function to packages
align_legend <- function(p, hjust = 0.5)
{
# extract legend
g <- cowplot::plot_to_gtable(p)
grobs <- g$grobs
legend_index <- which(sapply(grobs, function(x) x$name) == "guide-box")
legend <- grobs[[legend_index]]
# extract guides table
guides_index <- which(sapply(legend$grobs, function(x) x$name) == "layout")
# there can be multiple guides within one legend box
for (gi in guides_index) {
guides <- legend$grobs[[gi]]
# add extra column for spacing
# guides$width[5] is the extra spacing from the end of the legend text
# to the end of the legend title. If we instead distribute it by `hjust:(1-hjust)` on
# both sides, we get an aligned legend
spacing <- guides$width[5]
guides <- gtable::gtable_add_cols(guides, hjust*spacing, 1)
guides$widths[6] <- (1-hjust)*spacing
title_index <- guides$layout$name == "title"
guides$layout$l[title_index] <- 2
# reconstruct guides and write back
legend$grobs[[gi]] <- guides
}
# reconstruct legend and write back
g$grobs[[legend_index]] <- legend
g
}
theme_manuscript <- function(){
theme_bw() +
theme(panel.border = element_rect(colour = "black", fill=NA, size=0.5),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, color = "black"),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size =12),
legend.title=element_text(size=12, colour = 'black'),
legend.text =element_text(size = 12, colour = 'black'),
legend.key.height = unit(1, "cm"))
}
theme_corr <- function(){
theme(panel.border = element_rect(colour = "black", fill=NA, size=0.5),
axis.text.x = element_text(size = 12, color = "black"),
axis.text.y = element_text(size = 12, color = "black"))
}
igv.lm.point <- function(df, x, y, point_val, legend_title, xlab, ylab){
plot <- ggplot(df, aes(x=x, y=y)) +
geom_point(aes(fill=as.factor(point_val)), alpha=0.7, shape=21, size = 10) +
scale_fill_igv()+
stat_cor(method = "pearson", col='darkred') +
theme_manuscript()+
guides(fill=guide_legend(title=legend_title, override.aes = list(size =5)))+
xlab(xlab)+
ylab(ylab)
}
map_theme <- function(){
theme(axis.text.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
rect = ggplot2::element_blank(),
plot.background = ggplot2::element_rect(fill = "white", colour = NA),
legend.title.align=0.5,
legend.title=element_text(size=16, colour = 'black'),
legend.text =element_text(size = 16, colour = 'black'),
legend.key.height = unit(0.65, "cm"))
}
gmap_fun <- function(polygon_name, point_data, labels, fill, legend_title){
ggplot(polygon_name) +
geom_sf(color='lightgrey')+
geom_point(data = point_data,
aes(fill=fill,  geometry = geometry),
stat = "sf_coordinates", alpha = 0.45, size=3, shape=21
) +
viridis::scale_fill_viridis(option='C', discrete=TRUE, labels=labels, na.value ='grey', limits=c('[0,0.2]', '(0.2,0.4]', '(0.4,0.6]', '(0.6,0.8]', '(0.8,1]', NA)) +
map_theme() +
guides(fill = guide_legend(title=legend_title, override.aes = list(size = 5)))+
xlab("")+
ylab("")
}
hist_fun <-function(df, x,fill, xlab, ylab,labels){
ggplot(df_all, aes(x =x, fill =fill))+
geom_histogram(alpha = 0.4, position="identity") +
scale_x_continuous(expand = c(0.03, 0)) +
scale_y_continuous(expand = c(0.03, 0)) +
labs(x = xlab, y =ylab)+
scale_fill_discrete(labels = labels)+
theme_manuscript()+
guides(fill=guide_legend(title=NULL))
}
gdensity_fun <- function(df, x, fill,legend_title, xlab, ylab){
ggplot(df, aes(x=x, fill=as.factor(fill))) +
geom_density(alpha=0.5) +
scale_x_continuous(expand = c(0.03, 0)) +
scale_y_continuous(expand = c(0.03, 0)) +
theme_bw() +
scale_fill_manual(values = c('#0073C2B2', "#EE4C97B2", "#E18727B2"))+
theme_manuscript()+
guides(fill=guide_legend(title=legend_title))+
xlab(xlab)+
ylab(ylab)
}
hist_fun2 <-function(df, xmin, xmax){
p<- ggplot(df, aes_string(x=names(df)[var_list[[2]]])) +
geom_histogram(bins = 30, alpha = 0.7, position="identity", color = "violetred4", fill = colr_data[colr_list[[1]]])+
theme_manuscript()+
labs (title = labels_data[label_list[[2]]], x = "values") +
xlab(xlab_data[2]) +
ylab("Count")+
scale_y_continuous(expand = c(0.03, 0))+
scale_x_continuous(limits = c(xmin, xmax), expand = c(0.01, 0))
}
cdf_hist = function(df, fill,color, x, xlab, bins){
hist=ggplot(df, aes(x =.data[[x]]))+geom_histogram(alpha = 0.4, position="identity", bins=bins)
max_y=max(ggplot_build(hist)$data[[1]]$count)
ggplot(df, aes(.data[[x]]))+
geom_histogram(fill=fill, color= color, alpha = 0.4, position="identity", bins = bins) +
stat_ecdf(aes_(y =bquote(..y..* .(max_y)), color =color))+
scale_y_continuous(name= 'Count', sec.axis=sec_axis(trans = ~./max_y, name = 'Cumulative percent', labels = function(x) format(x *100, digits=2, nsmall=0)))+
theme_manuscript()+theme(legend.position = 'none')+
xlab(xlab)
}
forest_fun = function(data, color1, color2, xname, breaks, labels){
ggplot(data=data, aes(y=index, x= coefficient, xmin=lci, xmax=uci))+
geom_point(shape = 15, color=color1, size = 3)+
geom_errorbarh(height=.1, color =color2)+
scale_x_continuous(name=xname)+
scale_y_continuous(name = "", breaks=breaks, labels = labels, trans = 'reverse')+
geom_vline(xintercept=0, color='black', linetype="dashed", alpha=.5)+
theme_manuscript()
}
#x <- c("tidyverse","INLA", "ggplot2", "ggpubr",  "rgdal", "sp", "sf", "tmap",
#'paletteer', 'cowplot', 'gridExtra', 'lme4', 'reshape2', "patchwork", "gdata",'cowplot', 'mmtable2', 'ggsci') #"inlabru","rebus"
#lapply(x, library, character.only = TRUE) #applying the library function to packages
## ----------------------------------------------------------------
### Read in computed DHS cluster data and generate related figures
## ----------------------------------------------------------------
#read in dhs file
dhs = read.csv(file.path(CsvDir, "all_DHS_variables_urban_malaria.csv"), header = T, sep = ',') %>% dplyr::select(-X)
dhs$positives_prop = round(dhs$positives/dhs$child_6_59_tested_malaria, 1)
#figure 1
dhs = dhs %>%drop_na(positives)
df=data.frame(x=c('2010', '2015', '2018'), y =c(81, 136, 560))
pdf('clusters_dhs.pdf')
#figure 2a
df_tested = data.frame(values = dhs$child_6_59_tested_malaria, category = 'tested')
df_positives = data.frame(values = dhs$positives, category = 'positives')
df_all = rbind(df_tested, df_positives)
p2 = hist_fun(df_all, df_all$values, df_all$category, 'Number of children 6 - 59 months', 'Count', c("Positive tests", "Tested"))
#figure 2c
#load spatial points
sf18 = st_read(file.path(DHSData, "Downloads", "NG_2018_DHS_11072019_1720_86355/NGGE7BFL/NGGE7BFL.shp"),)
sf15 = st_read(file.path(DHSData, "Downloads", "NG_2015_MIS_06192019/NGGE71FL/NGGE71FL.shp"),)
sf10 = st_read(file.path(DHSData, "Downloads", "NG_2010_MIS_06192019/NGGE61FL/NGGE61FL.shp"),)
sf_all = rbind(sf18, sf15, sf10) %>%filter(URBAN_RURA == "U") %>%  rename(v001 = DHSCLUST)
#data wrangling
dhs_ = dhs %>%  dplyr::select(v001, positives, child_6_59_tested_malaria, DHSYEAR=dhs_year, net_use, net_use_child, positives_prop)
map = sf_all %>% left_join(dhs_, by=c('v001', 'DHSYEAR'))  %>%  filter(LATNUM != 0)
map$positives_cut = cut(map$positives_prop, breaks=c(0, 0.2, 0.3, 0.4, 0.6, 0.8, 1), include.lowest = TRUE)
df_count = map %>% dplyr::select(positives_cut) %>%  group_by(positives_cut) %>%  summarize(`Count` = n())
map$net_cut = cut(map$net_use, breaks=c(0,10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100), include.lowest = TRUE)
stateshp = readOGR(file.path(DataDir, "shapefiles","gadm36_NGA_shp"), layer ="gadm36_NGA_1",use_iconv=TRUE, encoding= "UTF-8")
state_sf = st_as_sf(stateshp)
map_low_values = map %>% na.omit(positives) %>%  filter(positives_prop == 0) %>%  group_by(ADM1NAME) %>%  summarise(n())
map_low = map_low_values %>%  filter(`n()` >15)
cluster = map %>% na.omit(positives)
## ----------------------------------------------------------------
### Creating analysis data
## ----------------------------------------------------------------
#read in geospatial dataset and create final data
files = list.files(path = CsvDir, pattern = '.csv', full.names = TRUE, recursive = FALSE)
files = files[-grep('all_DHS_variables_urban|2018_mobility_DHS_variables_urban_malaria', files)]
df_geo = sapply(files, read.csv, simplify = F)
#find the number of NAs per column in geospatial data
df_nas = df_geo %>%  map(~summarise_all(., funs(sum(is.na(.)))))
names(df_nas[[1]])<- gsub(pattern = '\\_0m$', replacement = '_nas', x = names(df_nas[[1]]))#remove _0m from the 0m buffer dataset
for(i in seq_along(df_nas)){
names(df_nas[[i]])<- names(df_nas[[1]])
}
df_nas = bind_rows(df_nas, .id ='column label')
#find the number of NAs per column in geospatial data
df_nas = df_geo %>%  map(~summarise_all(., funs(sum(is.na(.)))))
names(df_nas[[1]])<- gsub(pattern = '\\_0m$', replacement = '_nas', x = names(df_nas[[1]]))#remove _0m from the 0m buffer dataset
for(i in seq_along(df_nas)){
names(df_nas[[i]])<- names(df_nas[[1]])
}
df_nas = bind_rows(df_nas, .id ='column label')
#count the number of negatives per column in geospatial data
df_neg = df_geo %>%  map(~summarise_all(., funs(sum((.) < 0, na.rm=TRUE))))
names(df_neg[[1]])<- gsub(pattern = '\\_0m$', replacement = '_negs', x = names(df_neg[[1]]))#remove _0m from the 0m buffer dataset
for(i in seq_along(df_neg)){
names(df_neg[[i]])<- names(df_neg[[1]])
}
df_neg = bind_rows(df_neg, .id ='column label')
df_na_neg = cbind(df_nas, df_neg)
df_na_neg = df_na_neg[,order(colnames(df_na_neg))]
df_na_neg
#select geospatial dataset values with fewest
df_sp = data.frame(v001 = df_geo[[1]]$v001, dhs_year = df_geo[[1]]$dhs_year, elevation_1000m = df_geo[[2]]$elev_merit_1000m,
housing_2000_4000m = df_geo[[5]]$housing_2000_4000m,  housing_2015_4000m = df_geo[[5]]$housing_2015_4000m,
minutes_nearest_city_1000m = df_geo[[2]]$minutes_to_city_1000m, minutes_travel_metre_2015_1000m = df_geo[[2]]$minutes_travel_metre_2015_1000m,
minutes_travel_metre_2019_2000m = df_geo[[3]]$minutes_travel_metre_2019_2000m, minutes_walking_healthcare_2000m = df_geo[[3]]$minutes_walking_healthcare_2000m,
minutes_walking_metre_2000m = df_geo[[3]]$minutes_walking_metre_2000m, motorized_travel_healthcare_2019_2000m = df_geo[[3]]$motorized_travel_healthcare_2019_2000m,
pop_den_U5_FB_4000m = df_geo[[5]]$pop_den_U5_FB_4000m, pop_density_0m = df_geo[[1]]$pop_density_0m,
precipitation_monthly_0m = df_geo[[1]]$preci_monthly_0m,soil_wetness_0m = df_geo[[1]]$soil_wetness_0m,
temperature_monthly_0m = df_geo[[1]]$temp_survey_month_0m, dist_water_bodies_0m = df_geo[[1]]$dist_water_bodies_0m, EVI_0m = df_geo[[1]]$EVI_0m)
#define variables to be used throughout analysis
positives = df_all$positives
dhs_year=df_all$dhs_year
num_tested =df_all$child_6_59_tested_malaria
region = df_all$region
interview_month = df_all$first_interview_month
edu_cat = cut(df_all$edu_a, breaks = c(0, 5, 10, 15, 100), include.lowest =TRUE)
#variable distribution and cumulative distribution
df_behave = data.frame(`Net use` = df_all$net_use, `Child net use` = df_all$net_use_child, `Medical treatment for fever` =df_all$med_treat_fever,
`Effective fever treatment` = df_all$ACT_use_U5)
df_behave_long = df_behave %>%  pivot_longer(everything(),names_to='x_label', values_to='values')
df_behave_long = df_behave %>%  pivot_longer(everything(),names_to='x_label', values_to='values')
df_list =split(df_behave_long, df_behave_long$x_label)
df_list_ordered = list(df_list$Net.use,df_list$Child.net.use, df_list$Medical.treatment.for.fever,
df_list$Effective.fever.treatment)
df_list =split(dhs_social_long, dhs_social_long$x_label)
#variable distribution and cumulative distribution
dhs_social = data.frame(`Educational attainment` = df_all$edu_a, Wealth = df_all$wealth, `Improved flooring` =df_all$floor_type,
`Improved roofing materials` = df_all$roof_type, `Improved wall` = df_all$wall_type, `improved housing in 2000` =df_all$housing_2000_4000m,
`improved housing in 2015` = df_all$housing_2015_4000m) %>%  mutate(improved.housing.in.2000 = improved.housing.in.2000*100,
improved.housing.in.2015= improved.housing.in.2015*100)
dhs_social_long = dhs_social %>%  pivot_longer(everything(),names_to='x_label', values_to='values')
df_list =split(dhs_social_long, dhs_social_long$x_label)
df_list_ordered = list(df_list$Educational.attainment,df_list$Wealth,
df_list$Improved.flooring, df_list$Improved.roofing.materials, df_list$Improved.wall, df_list$improved.housing.in.2000,
df_list$improved.housing.in.2015)
#define variables to be used throughout analysis
positives = df_all$positives
dhs_year=df_all$dhs_year
num_tested =df_all$child_6_59_tested_malaria
region = df_all$region
interview_month = df_all$first_interview_month
edu_cat = cut(df_all$edu_a, breaks = c(0, 5, 10, 15, 100), include.lowest =TRUE)
#variable distribution and cumulative distribution
dhs_social = data.frame(`Educational attainment` = df_all$edu_a, Wealth = df_all$wealth, `Improved flooring` =df_all$floor_type,
`Improved roofing materials` = df_all$roof_type, `Improved wall` = df_all$wall_type, `improved housing in 2000` =df_all$housing_2000_4000m,
`improved housing in 2015` = df_all$housing_2015_4000m) %>%  mutate(improved.housing.in.2000 = improved.housing.in.2000*100,
improved.housing.in.2015= improved.housing.in.2015*100)
dhs_social_long = dhs_social %>%  pivot_longer(everything(),names_to='x_label', values_to='values')
df_list =split(dhs_social_long, dhs_social_long$x_label)
df_list_ordered = list(df_list$Educational.attainment,df_list$Wealth,
df_list$Improved.flooring, df_list$Improved.roofing.materials, df_list$Improved.wall, df_list$improved.housing.in.2000,
df_list$improved.housing.in.2015)
## -----------------------------------------------------------------------------------------------------------------------
### Demographic variable distribution, cumulative distribution, correlation and relationship with malaria prevalence
## -----------------------------------------------------------------------------------------------------------------------
#variable distribution and cumulative distribution
demo_numeric = data.frame(`Population density` = df_all$pop_density_0m, `U5 population density` = df_all$pop_den_U5_FB_4000m, `Pregnant women` =df_all$preg_women,
`Female population` = df_all$all_female_sex, `Household size` = df_all$household_size, `Median age` =df_all$median_age)
demo_numeric_long = demo_numeric %>%  pivot_longer(everything(),names_to='x_label', values_to='values')
df_list =split(demo_numeric_long, demo_numeric_long$x_label)
df_list_ordered = list(df_list$Population.density,df_list$U5.population.density, df_list$Pregnant.women,
df_list$Female.population, df_list$Household.size, df_list$Median.age)
x=list('values')
## -----------------------------------------------------------------------------------------------------------------------
### Demographic variable distribution, cumulative distribution, correlation and relationship with malaria prevalence
## -----------------------------------------------------------------------------------------------------------------------
#variable distribution and cumulative distribution
demo_numeric = data.frame(`Population density` = df_all$pop_density_0m, `U5 population density` = df_all$pop_den_U5_FB_4000m, `Pregnant women` =df_all$preg_women,
`Female population` = df_all$all_female_sex, `Household size` = df_all$household_size, `Median age` =df_all$median_age)
demo_numeric_long = demo_numeric %>%  pivot_longer(everything(),names_to='x_label', values_to='values')
## ----------------------------------------------------------------
### Read in computed DHS cluster data and generate related figures
## ----------------------------------------------------------------
#read in dhs file
dhs = read.csv(file.path(CsvDir, "all_DHS_variables_urban_malaria.csv"), header = T, sep = ',') %>% dplyr::select(-X)
dhs$positives_prop = round(dhs$positives/dhs$child_6_59_tested_malaria, 1)
#figure 1
dhs = dhs %>%drop_na(positives)
df=data.frame(x=c('2010', '2015', '2018'), y =c(81, 136, 560))
pdf('clusters_dhs.pdf')
barplot(height=df$y, names=df$x,
col=rgb(0.8,0.1,0.1,0.6),
xlab="Year",
ylab="Number of Clusters",
)
dev.off()
p1 = igv.lm.point(dhs, dhs$num_child_6_59, dhs$child_6_59_tested_malaria,dhs$dhs_year,  "Survey year", 'Number of children 6 - 59 months', 'Number of children 6 - 59 months \n tested for malaria')
p1= p1 +geom_smooth(method=lm, color = "black")+ theme(legend.position = 'none')
#values used in manuscript texts
table(dhs$dhs_year)
nrow(!is.na(subset(dhs, dhs_year ==2010 & num_child_6_59 >=20)))
nrow(!is.na(subset(dhs, dhs_year ==2015 & num_child_6_59 >=20)))
nrow(!is.na(subset(dhs, dhs_year ==2018 & num_child_6_59 >=20)))
#figure 2a
df_tested = data.frame(values = dhs$child_6_59_tested_malaria, category = 'tested')
df_positives = data.frame(values = dhs$positives, category = 'positives')
df_all = rbind(df_tested, df_positives)
p2 = hist_fun(df_all, df_all$values, df_all$category, 'Number of children 6 - 59 months', 'Count', c("Positive tests", "Tested"))
#figure 2b
#examine the number of children tested
p3 = igv.lm.point(dhs, dhs$child_6_59_tested_malaria, dhs$positives, dhs$dhs_year, 'Survey year', 'Number of children 6 - 59 months \n tested for malaria', 'Number of positive tests' )
p3_ = p3 + geom_abline(slope=1, intercept=c(0,0), size = 0.9) +geom_smooth(method=lm, color = "black")
#figure 2c
#load spatial points
sf18 = st_read(file.path(DHSData, "Downloads", "NG_2018_DHS_11072019_1720_86355/NGGE7BFL/NGGE7BFL.shp"),)
sf15 = st_read(file.path(DHSData, "Downloads", "NG_2015_MIS_06192019/NGGE71FL/NGGE71FL.shp"),)
sf10 = st_read(file.path(DHSData, "Downloads", "NG_2010_MIS_06192019/NGGE61FL/NGGE61FL.shp"),)
sf_all = rbind(sf18, sf15, sf10) %>%filter(URBAN_RURA == "U") %>%  rename(v001 = DHSCLUST)
#data wrangling
dhs_ = dhs %>%  dplyr::select(v001, positives, child_6_59_tested_malaria, DHSYEAR=dhs_year, net_use, net_use_child, positives_prop)
map = sf_all %>% left_join(dhs_, by=c('v001', 'DHSYEAR'))  %>%  filter(LATNUM != 0)
map$positives_cut = cut(map$positives_prop, breaks=c(0, 0.2, 0.3, 0.4, 0.6, 0.8, 1), include.lowest = TRUE)
df_count = map %>% dplyr::select(positives_cut) %>%  group_by(positives_cut) %>%  summarize(`Count` = n())
map$net_cut = cut(map$net_use, breaks=c(0,10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100), include.lowest = TRUE)
stateshp = readOGR(file.path(DataDir, "shapefiles","gadm36_NGA_shp"), layer ="gadm36_NGA_1",use_iconv=TRUE, encoding= "UTF-8")
state_sf = st_as_sf(stateshp)
#big map
map_big = gmap_fun(state_sf, map, labels=c(paste0('0 - 0.2',  ' (', df_count$Count[[1]], ')'),
paste0('0.3 - 0.4',  ' (', df_count$Count[[2]], ')'), paste0('0.5 - 0.6',  ' (', df_count$Count[[3]], ')'),
paste0('0.7 - 0.8',  ' (', df_count$Count[[4]], ')'), paste0('0.9 - 1.0',  ' (', df_count$Count[[5]], ')'),
'Missing data'),
map$positives_cut, 'Test positivity rate (overall count)')
#Kano
df_kano = dplyr::filter(state_sf, (NAME_1 %in% c('Kano')))
map_kano = dplyr::filter(map, (ADM1NAME %in% c('KANO')))
map_lag = gmap_fun(df_lagos, map_lagos, labels=c('0 - 0.2', '0.3 - 0.4', '0.5 - 0.6', '0.7 - 0.8', '0.9 - 1.0', 'Missing data'),
map_lagos$positives_cut, 'Test positivity rate')
map_lag = map_lag + theme(legend.position = 'none', panel.border = element_rect(colour = "black", fill=NA, size=0.5))+ xlab('Lagos')
#Lagos
df_lagos = dplyr::filter(state_sf, (NAME_1 %in% c('Lagos')))
#figure 3
#trends by DHS year
trend_data= dhs
trend_data$month_year = paste0(trend_data$first_interview_month, "_", trend_data$dhs_year)
table(trend_data$month_year)
trend_data_10 = trend_data[trend_data$first_interview_month ==10,]
p_all_10 = gdensity_fun(trend_data_10, trend_data_10$positives_prop, trend_data_10$dhs_year, "Survey year",
'Test positivity rate for clusters sampled in October', 'Density')
trend_data_11 = trend_data[trend_data$first_interview_month ==11,]
p_all_11 = gdensity_fun(trend_data_11, trend_data_11$positives_prop, trend_data_11$dhs_year, "Survey year",
'Test positivity rate for clusters sampled in November', 'Density')
trend_data_12 = trend_data[trend_data$first_interview_month ==12,]
p_all_12 = gdensity_fun(trend_data_12, trend_data_12$positives_prop, trend_data_12$dhs_year, "Survey year",
'Test positivity rate for clusters sampled in December', 'Density')
all_plots = p_all_10 / p_all_11 / p_all_12 +  plot_annotation(tag_levels = 'A') & theme(plot.tag = element_text(face = 'bold', size = 16))
all_plots
data = data.frame(pos =trend_data_12[trend_data_12$dhs_year == 2018,'positives_prop'])
data_ = data %>%  filter(pos == 0)
## ----------------------------------------------------------------
### Creating analysis data
## ----------------------------------------------------------------
#read in geospatial dataset and create final data
files = list.files(path = CsvDir, pattern = '.csv', full.names = TRUE, recursive = FALSE)
files = files[-grep('all_DHS_variables_urban|2018_mobility_DHS_variables_urban_malaria', files)]
df_geo = sapply(files, read.csv, simplify = F)
#find the number of NAs per column in geospatial data
df_nas = df_geo %>%  map(~summarise_all(., funs(sum(is.na(.)))))
names(df_nas[[1]])<- gsub(pattern = '\\_0m$', replacement = '_nas', x = names(df_nas[[1]]))#remove _0m from the 0m buffer dataset
for(i in seq_along(df_nas)){
names(df_nas[[i]])<- names(df_nas[[1]])
}
#find the number of NAs per column in geospatial data
df_nas = df_geo %>%  map(~summarise_all(., funs(sum(is.na(.)))))
names(df_nas[[1]])<- gsub(pattern = '\\_0m$', replacement = '_nas', x = names(df_nas[[1]]))#remove _0m from the 0m buffer dataset
for(i in seq_along(df_nas)){
names(df_nas[[i]])<- names(df_nas[[1]])
}
df_nas = bind_rows(df_nas, .id ='column label')
#count the number of negatives per column in geospatial data
df_neg = df_geo %>%  map(~summarise_all(., funs(sum((.) < 0, na.rm=TRUE))))
names(df_neg[[1]])<- gsub(pattern = '\\_0m$', replacement = '_negs', x = names(df_neg[[1]]))#remove _0m from the 0m buffer dataset
for(i in seq_along(df_neg)){
names(df_neg[[i]])<- names(df_neg[[1]])
}
df_neg = bind_rows(df_neg, .id ='column label')
df_na_neg = cbind(df_nas, df_neg)
df_na_neg = df_na_neg[,order(colnames(df_na_neg))]
df_na_neg
#select geospatial dataset values with fewest
df_sp = data.frame(v001 = df_geo[[1]]$v001, dhs_year = df_geo[[1]]$dhs_year, elevation_1000m = df_geo[[2]]$elev_merit_1000m,
housing_2000_4000m = df_geo[[5]]$housing_2000_4000m,  housing_2015_4000m = df_geo[[5]]$housing_2015_4000m,
minutes_nearest_city_1000m = df_geo[[2]]$minutes_to_city_1000m, minutes_travel_metre_2015_1000m = df_geo[[2]]$minutes_travel_metre_2015_1000m,
minutes_travel_metre_2019_2000m = df_geo[[3]]$minutes_travel_metre_2019_2000m, minutes_walking_healthcare_2000m = df_geo[[3]]$minutes_walking_healthcare_2000m,
minutes_walking_metre_2000m = df_geo[[3]]$minutes_walking_metre_2000m, motorized_travel_healthcare_2019_2000m = df_geo[[3]]$motorized_travel_healthcare_2019_2000m,
pop_den_U5_FB_4000m = df_geo[[5]]$pop_den_U5_FB_4000m, pop_density_0m = df_geo[[1]]$pop_density_0m,
precipitation_monthly_0m = df_geo[[1]]$preci_monthly_0m,soil_wetness_0m = df_geo[[1]]$soil_wetness_0m,
temperature_monthly_0m = df_geo[[1]]$temp_survey_month_0m, dist_water_bodies_0m = df_geo[[1]]$dist_water_bodies_0m, EVI_0m = df_geo[[1]]$EVI_0m)
df_all <- left_join(dhs, df_sp, by =c('v001', 'dhs_year'))
#variable distribution and cumulative distribution
dhs_social = data.frame(`Educational attainment` = df_all$edu_a, Wealth = df_all$wealth, `Improved flooring` =df_all$floor_type,
`Improved roofing materials` = df_all$roof_type, `Improved wall` = df_all$wall_type, `improved housing in 2000` =df_all$housing_2000_4000m,
`improved housing in 2015` = df_all$housing_2015_4000m) %>%  mutate(improved.housing.in.2000 = improved.housing.in.2000*100,
improved.housing.in.2015= improved.housing.in.2015*100)
df_all <-read.csv(file.path(CsvDir, "multivariate_analysis_dataset.csv"), header = T, sep = ',')
write.csv(df_all, file=file.path(CsvDir, 'final_dataset_multivariate_analysis','final_dataset_multivariate_analysis', 'multivariate_analysis_dataset.csv'))
write.csv(df_all, file=file.path(CsvDir, 'final_dataset_multivariate_analysis', 'multivariate_analysis_dataset.csv'))
df_all <-read.csv(file.path(CsvDir, 'final_dataset_multivariate_analysis',"multivariate_analysis_dataset.csv"), header = T, sep = ',')
#variable distribution and cumulative distribution
dhs_social = data.frame(`Educational attainment` = df_all$edu_a, Wealth = df_all$wealth, `Improved flooring` =df_all$floor_type,
`Improved roofing materials` = df_all$roof_type, `Improved wall` = df_all$wall_type, `improved housing in 2000` =df_all$housing_2000_4000m,
`improved housing in 2015` = df_all$housing_2015_4000m) %>%  mutate(improved.housing.in.2000 = improved.housing.in.2000*100,
improved.housing.in.2015= improved.housing.in.2015*100)
df_all <-read.csv(file.path(CsvDir, 'final_dataset_multivariate_analysis',"multivariate_analysis_dataset.csv"), header = T, sep = ',')
#variable distribution and cumulative distribution
dhs_social = data.frame(`Educational attainment` = df_all$edu_a, Wealth = df_all$wealth, `Improved flooring` =df_all$floor_type,
`Improved roofing materials` = df_all$roof_type, `Improved wall` = df_all$wall_type, `improved housing in 2000` =df_all$housing_2000_4000m,
`improved housing in 2015` = df_all$housing_2015_4000m) %>%  mutate(improved.housing.in.2000 = improved.housing.in.2000*100,
improved.housing.in.2015= improved.housing.in.2015*100)
dhs_social_long = dhs_social %>%  pivot_longer(everything(),names_to='x_label', values_to='values')
df_list =split(dhs_social_long, dhs_social_long$x_label)
df_list_ordered = list(df_list$Educational.attainment,df_list$Wealth,
df_list$Improved.flooring, df_list$Improved.roofing.materials, df_list$Improved.wall, df_list$improved.housing.in.2000,
df_list$improved.housing.in.2015)
x=list('values')
fill = list('#8971B3')
color = list('#8971B3')
xlab=list(expression(atop('% with post-primary', paste('education'))),
expression(atop('% in the rich wealth', paste('quintiles'))),expression(atop('% in homes with improved', paste(' flooring'))),
expression(atop('% in homes with a metal', paste('or zinc roof'))), expression(atop('% in homes with an', paste('improved wall type'))),
expression(atop('% living in improved', paste('housing (2000)'))),
expression(atop('% living in improved', paste('housing (2015)'))))
bins = list(30)
p = pmap(list(df_list_ordered,fill, color, x, xlab, bins), cdf_hist)
p=p[[1]]+ p[[2]]+ p[[3]]+p[[4]]+ p[[5]]+p[[6]]+p[[7]]+ plot_annotation(tag_levels = 'A')& theme(plot.tag = element_text(size = 12, face = 'bold'))
p
#variable distribution and cumulative distribution
df_behave = data.frame(`Net use` = df_all$net_use, `Child net use` = df_all$net_use_child, `Medical treatment for fever` =df_all$med_treat_fever,
`Effective fever treatment` = df_all$ACT_use_U5)
df_behave_long = df_behave %>%  pivot_longer(everything(),names_to='x_label', values_to='values')
df_list =split(df_behave_long, df_behave_long$x_label)
df_list_ordered = list(df_list$Net.use,df_list$Child.net.use, df_list$Medical.treatment.for.fever,
df_list$Effective.fever.treatment)
x=list('values')
fill = list('salmon')
color = list('salmon')
xlab=list('% of individuals using bednets',
expression(atop('% of children 6- 59 months using bednets', paste('among those tested for microscopy'))),expression(atop('% of U5 children that sought', paste('medical treatment for fever'))),
expression(atop('% of U5 children with fever that received', paste('an artemisinin-based combination therapy'))))
bins = list(25)
p = pmap(list(df_list_ordered,fill, color, x, xlab, bins), cdf_hist)
p=p[[1]]+ p[[2]]+ p[[3]]+p[[4]] + plot_annotation(tag_levels = 'A')&
theme(plot.tag = element_text(size = 12, face = 'bold'))
p
p
