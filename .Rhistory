df<-sapply(files, read.csv, simplify = F)
df <- df %>% map_if(~ all(c('hv001') %in% colnames(.x)), ~rename(., v001 = hv001))
df<- df[order(sapply(df,nrow),decreasing = T)]
df<- df %>% map_if(~ all(c('.id') %in% colnames(.x)),~dplyr::select(., -.id))
df <- df %>%  purrr::reduce(left_join, by = c('dhs_year', 'v001')) %>%  mutate(dhs_year = as.character(dhs_year))
df_geo <- append(df_geo, list(df))
}
files <- list.files(path = file.path(DataIn, 'geospatial_covariates') , pattern = '.csv', full.names = TRUE, recursive = FALSE)
files<- files[-grep('pop_density_FB|secondary_vector|EVI', files)]
rm(list=ls())
#memory.limit(size = 50000)
## -----------------------------------------
### Paths
## -----------------------------------------
Drive <- file.path(gsub("[\\]", "/", gsub("Documents", "", Sys.getenv("HOME"))))
NuDir <- file.path(Drive, "Box", "NU-malaria-team")
NGDir <-file.path(NuDir, "data", "nigeria_dhs",  "data_analysis")
DataDir <-file.path(NGDir, "data")
ResultDir <-file.path(NGDir, "results")
DHSData <- file.path(DataDir, 'DHS')
DataIn <- file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates')
ifelse(!dir.exists(file.path(DataIn, "cleaned_cluster_covariates_all")),
dir.create(file.path(DataIn, "cleaned_cluster_covariates_all")), FALSE)
cleandatDir <- file.path(DataIn, 'cleaned_cluster_covariates_all')
files <- list.files(path = file.path(DataIn, 'geospatial_covariates') , pattern = '.csv', full.names = TRUE, recursive = FALSE)
files<- files[-grep('pop_density_FB|secondary_vector|EVI', files)]
files
files <- list.files(path = file.path(DataIn, 'geospatial_covariates') , pattern = '.csv', full.names = TRUE, recursive = FALSE)
files<- files[-grep('pop_density_FB|secondary_vector', files)]
files <- files[-grep(buffer[[1]], files)]
buffer <- c('_1000m_|_2000m_|_3000m_|_4000m_',  '_0m_|_2000m_|_3000m_|_4000m_', '_0m_|_1000m_|_3000m_|_4000m_','_0m_|_1000m_|_2000m_|_4000m_', '_0m_|_1000m_|_2000m_|_3000m_')
buffer_label <- c('0m', '1000m', '2000m', '3000m', '4000m')
files <- list.files(path = file.path(DataIn, 'geospatial_covariates') , pattern = '.csv', full.names = TRUE, recursive = FALSE)
files<- files[-grep('pop_density_FB|secondary_vector', files)]
files <- files[-grep(buffer[[1]], files)]
df<-sapply(files, read.csv, simplify = F)
View(df)
buffer <- c('_1000m_|_2000m_|_3000m_|_4000m_',  '_0m_|_2000m_|_3000m_|_4000m_', '_0m_|_1000m_|_3000m_|_4000m_','_0m_|_1000m_|_2000m_|_4000m_', '_0m_|_1000m_|_2000m_|_3000m_')
buffer_label <- c('0m', '1000m', '2000m', '3000m', '4000m')
df_geo<- list()
for (i in 1:length(buffer)){
files <- list.files(path = file.path(DataIn, 'geospatial_covariates') , pattern = '.csv', full.names = TRUE, recursive = FALSE)
files<- files[-grep('pop_density_FB|secondary_vector', files)]
files <- files[-grep(buffer[[1]], files)]
df<-sapply(files, read.csv, simplify = F)
df <- df %>% map_if(~ all(c('hv001') %in% colnames(.x)), ~rename(., v001 = hv001))
df<- df[order(sapply(df,nrow),decreasing = T)]
df<- df %>% map_if(~ all(c('.id') %in% colnames(.x)),~dplyr::select(., -.id))
df<- df %>% map_if(~ all(c('month') %in% colnames(.x)),~dplyr::select(., -month))
df <- df %>%  purrr::reduce(left_join, by = c('dhs_year', 'v001')) %>%  mutate(dhs_year = as.character(dhs_year))
df_geo <- append(df_geo, list(df))
}
View(df_geo)
buffer <- c('_1000m_|_2000m_|_3000m_|_4000m_',  '_0m_|_2000m_|_3000m_|_4000m_', '_0m_|_1000m_|_3000m_|_4000m_','_0m_|_1000m_|_2000m_|_4000m_', '_0m_|_1000m_|_2000m_|_3000m_')
buffer_label <- c('0m', '1000m', '2000m', '3000m', '4000m')
df_geo<- list()
for (i in 1:length(buffer)){
files <- list.files(path = file.path(DataIn, 'geospatial_covariates') , pattern = '.csv', full.names = TRUE, recursive = FALSE)
files<- files[-grep('pop_density_FB|secondary_vector', files)]
files <- files[-grep(buffer[[i]], files)]
df<-sapply(files, read.csv, simplify = F)
df <- df %>% map_if(~ all(c('hv001') %in% colnames(.x)), ~rename(., v001 = hv001))
df<- df[order(sapply(df,nrow),decreasing = T)]
df<- df %>% map_if(~ all(c('.id') %in% colnames(.x)),~dplyr::select(., -.id))
df<- df %>% map_if(~ all(c('month') %in% colnames(.x)),~dplyr::select(., -month))
df <- df %>%  purrr::reduce(left_join, by = c('dhs_year', 'v001')) %>%  mutate(dhs_year = as.character(dhs_year))
df_geo <- append(df_geo, list(df))
}
View(df_geo)
filenames <- c('0m', '1000m', '2000m', '3000m', '4000m')
for (i in 1:length(df_geo)){
write.csv(df_geo[[i]], paste0(cleandatDir, '/New_082321/all_geospatial_variables_urban_malaria_', filenames[[i]], '.csv'))
}
rm(list=ls())
#memory.limit(size = 50000)
# ----------------------------------------------------
### Directories
# ----------------------------------------------------
user = Sys.getenv("USERNAME")
Drive = file.path(gsub("[\\]", "/", gsub("Documents", "", Sys.getenv("HOME"))))
NuDir = file.path(Drive, "Box", "NU-malaria-team")
ProjectDir = file.path(NuDir, 'data', 'nigeria_dhs' , 'data_analysis')
DataDir = file.path(ProjectDir, "data")
DHSData = file.path(DataDir, 'DHS')
DataIn = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'DHS_survey_extract')
ResultDir =file.path(ProjectDir, "results", "research_plots")
HisDir =file.path(ResultDir, "histograms")
MapsDir = file.path(ResultDir, "maps")
CsvDir = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'cleaned_cluster_covariates_all', 'New_082321')
library(ggcorrplot)
# ----------------------------------------------------
### Required functions and settings
## ----------------------------------------------------
source("./functions/descriptive_analysis_functions.R")
files = list.files(path = CsvDir, pattern = '.csv', full.names = TRUE, recursive = FALSE)
files = files[-grep('all_DHS_variables_urban', files)]
df_geo = sapply(files, read.csv, simplify = F)
View(df_geo)
files = list.files(path = CsvDir, pattern = '.csv', full.names = TRUE, recursive = FALSE)
files = files[-grep('all_DHS_variables_urban', files)]
df_geo = sapply(files, read.csv, simplify = F)
df_nas = df_geo %>%  map(~summarise_all(., funs(sum(is.na(.)))))
names(df_nas[[1]])<- gsub(pattern = '\\_0m$', replacement = '_nas', x = names(df_nas[[1]]))#remove _0m from the 0m buffer dataset
for(i in seq_along(df_nas)){
names(df_nas[[i]])<- names(df_nas[[1]])
}
df_nas = bind_rows(df_nas, .id ='column label')
df_neg = df_geo %>%  map(~summarise_all(., funs(sum((.) < 0, na.rm=TRUE))))
names(df_neg[[1]])<- gsub(pattern = '\\_0m$', replacement = '_negs', x = names(df_neg[[1]]))#remove _0m from the 0m buffer dataset
for(i in seq_along(df_neg)){
names(df_neg[[i]])<- names(df_neg[[1]])
}
df_neg = bind_rows(df_neg, .id ='column label')
df_na_neg = cbind(df_nas, df_neg)
df_na_neg = df_na_neg[,order(colnames(df_na_neg))]
df_na_neg
View(df_na_neg)
files = list.files(path = CsvDir, pattern = '.csv', full.names = TRUE, recursive = FALSE)
files = files[-grep('all_DHS_variables_urban', files)]
df_geo = sapply(files, read.csv, simplify = F)
View(df_geo)
View(df_geo)
rm(list=ls())
#memory.limit(size = 50000)
## -----------------------------------------
### Paths
## -----------------------------------------
Drive <- file.path(gsub("[\\]", "/", gsub("Documents", "", Sys.getenv("HOME"))))
NuDir <- file.path(Drive, "Box", "NU-malaria-team")
NGDir <-file.path(NuDir, "data", "nigeria_dhs",  "data_analysis")
DataDir <-file.path(NGDir, "data")
ResultDir <-file.path(NGDir, "results")
DHSData <- file.path(DataDir, 'DHS')
DataIn <- file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates')
ifelse(!dir.exists(file.path(DataIn, "cleaned_cluster_covariates_all")),
dir.create(file.path(DataIn, "cleaned_cluster_covariates_all")), FALSE)
cleandatDir <- file.path(DataIn, 'cleaned_cluster_covariates_all')
buffer <- c('_1000m_|_2000m_|_3000m_|_4000m_',  '_0m_|_2000m_|_3000m_|_4000m_', '_0m_|_1000m_|_3000m_|_4000m_','_0m_|_1000m_|_2000m_|_4000m_', '_0m_|_1000m_|_2000m_|_3000m_')
buffer_label <- c('0m', '1000m', '2000m', '3000m', '4000m')
df_geo<- list()
for (i in 1:length(buffer)){
files <- list.files(path = file.path(DataIn, 'geospatial_covariates') , pattern = '.csv', full.names = TRUE, recursive = FALSE)
files<- files[-grep('pop_density_FB|secondary_vector', files)]
files <- files[-grep(buffer[[i]], files)]
df<-sapply(files, read.csv, simplify = F)
df <- df %>% map_if(~ all(c('hv001') %in% colnames(.x)), ~rename(., v001 = hv001))
df<- df[order(sapply(df,nrow),decreasing = T)]
df<- df %>% map_if(~ all(c('.id') %in% colnames(.x)),~dplyr::select(., -.id))
df<- df %>% map_if(~ all(c('month') %in% colnames(.x)),~dplyr::select(., -month))
df <- df %>%  purrr::reduce(left_join, by = c('dhs_year', 'v001')) %>%  mutate(dhs_year = as.character(dhs_year))
df_geo <- append(df_geo, list(df))
}
View(df_geo)
rm(list=ls())
memory.limit(size = 50000)
## -----------------------------------------
### Paths
## -----------------------------------------
user <- Sys.getenv("USERNAME")
Drive <- file.path(gsub("[\\]", "/", gsub("Documents", "", Sys.getenv("HOME"))))
NuDir <- file.path(Drive, "Box", "NU-malaria-team")
DataDir <- file.path(NuDir, "data", 'nigeria_dhs' , 'data_analysis', 'data')
GlobDir <- file.path(DataDir, 'africa_health_district_climate', 'climate', 'global')
DHSData <- file.path(DataDir, 'DHS')
RastDir <- file.path(DataDir, "Raster_files")
DataIn <- file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'DHS_survey_extract')
GeoDir <- file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'geospatial_covariates')
dhs <- read.files(DHSData, "*FL.shp$", 'NGGE61FL|NGGE71FL|NGGE7BFL', shapefile) #read in DHS clusters
dhs <- map(dhs, st_as_sf) %>%  map(~filter(.x, URBAN_RURA == "U")) %>% map(sf:::as_Spatial)
# buffers of interest
vars <- c(0, 1000, 2000, 3000, 4000)
## These scripts are used to extract cluster level data and variables for urban settings in Nigeria
rm(list=ls())
memory.limit(size = 50000)
## -----------------------------------------
### Paths
## -----------------------------------------
user <- Sys.getenv("USERNAME")
Drive <- file.path(gsub("[\\]", "/", gsub("Documents", "", Sys.getenv("HOME"))))
NuDir <- file.path(Drive, "Box", "NU-malaria-team")
DataDir <- file.path(NuDir, "data", 'nigeria_dhs' , 'data_analysis', 'data')
GlobDir <- file.path(DataDir, 'africa_health_district_climate', 'climate', 'global')
DHSData <- file.path(DataDir, 'DHS')
RastDir <- file.path(DataDir, "Raster_files")
DataIn <- file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'DHS_survey_extract')
GeoDir <- file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'geospatial_covariates')
# -----------------------------------------
### Required functions and settings
## -----------------------------------------
source("./functions/data_extractor_functions.R")
options(survey.lonely.psu="adjust") # this option allows admin units with only one cluster to be analyzed
dhs <- read.files(DHSData, "*FL.shp$", 'NGGE61FL|NGGE71FL|NGGE7BFL', shapefile) #read in DHS clusters
dhs <- map(dhs, st_as_sf) %>%  map(~filter(.x, URBAN_RURA == "U")) %>% map(sf:::as_Spatial)
# buffers of interest
vars <- c(0, 1000, 2000, 3000, 4000)
raster <- raster(file.path(RastDir, "distance_to_water_bodies/distance_to_water.tif"))
raster <- list(raster)
raster <- raster(file.path(RastDir, "distance_to_water_bodies/distance_to_water.tif"))
raster <- list(raster)
for (i in 1:length(vars)) {
var_name <- paste0('dist_water_bodies_', as.character(vars[i]), 'm')
df <- map2(dhs, raster, get_crs)
df <- pmap(list(raster, df, vars[i]), extract_fun)
df <- df %>%  map(~rename_with(., .fn=~paste0(var_name), .cols = starts_with('distance')))
df <- plyr::ldply(df) %>% dplyr::select(-c(ID))
write.csv(df, file =file.path(GeoDir, paste0('dist_water_bodies_', as.character(vars[i]),
'm_buffer', "_DHS_10_15_18.csv")),row.names = FALSE)
}
rm(list=ls())
#memory.limit(size = 50000)
# ----------------------------------------------------
### Directories
# ----------------------------------------------------
user = Sys.getenv("USERNAME")
Drive = file.path(gsub("[\\]", "/", gsub("Documents", "", Sys.getenv("HOME"))))
NuDir = file.path(Drive, "Box", "NU-malaria-team")
ProjectDir = file.path(NuDir, 'data', 'nigeria_dhs' , 'data_analysis')
DataDir = file.path(ProjectDir, "data")
DHSData = file.path(DataDir, 'DHS')
DataIn = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'DHS_survey_extract')
ResultDir =file.path(ProjectDir, "results", "research_plots")
HisDir =file.path(ResultDir, "histograms")
MapsDir = file.path(ResultDir, "maps")
CsvDir = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'cleaned_cluster_covariates_all', 'New_082321')
library(ggcorrplot)
# ----------------------------------------------------
### Required functions and settings
## ----------------------------------------------------
source("./functions/descriptive_analysis_functions.R")
user = Sys.getenv("USERNAME")
Drive = file.path(gsub("[\\]", "/", gsub("Documents", "", Sys.getenv("HOME"))))
NuDir = file.path(Drive, "Box", "NU-malaria-team")
ProjectDir = file.path(NuDir, 'data', 'nigeria_dhs' , 'data_analysis')
DataDir = file.path(ProjectDir, "data")
DHSData = file.path(DataDir, 'DHS')
DataIn = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'DHS_survey_extract')
ResultDir =file.path(ProjectDir, "results", "research_plots")
HisDir =file.path(ResultDir, "histograms")
MapsDir = file.path(ResultDir, "maps")
CsvDir = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'cleaned_cluster_covariates_all', 'New_082321')
# ----------------------------------------------------
### Required functions and settings
## ----------------------------------------------------
source("./functions/descriptive_analysis_functions.R")
files = list.files(path = CsvDir, pattern = '.csv', full.names = TRUE, recursive = FALSE)
files = files[-grep('all_DHS_variables_urban', files)]
df_geo = sapply(files, read.csv, simplify = F)
#find the number of NAs per column in geospatial data
df_nas = df_geo %>%  map(~summarise_all(., funs(sum(is.na(.)))))
names(df_nas[[1]])<- gsub(pattern = '\\_0m$', replacement = '_nas', x = names(df_nas[[1]]))#remove _0m from the 0m buffer dataset
for(i in seq_along(df_nas)){
names(df_nas[[i]])<- names(df_nas[[1]])
}
df_nas = bind_rows(df_nas, .id ='column label')
#count the number of negatives per column in geospatial data
df_neg = df_geo %>%  map(~summarise_all(., funs(sum((.) < 0, na.rm=TRUE))))
names(df_neg[[1]])<- gsub(pattern = '\\_0m$', replacement = '_negs', x = names(df_neg[[1]]))#remove _0m from the 0m buffer dataset
for(i in seq_along(df_neg)){
names(df_neg[[i]])<- names(df_neg[[1]])
}
df_neg = bind_rows(df_neg, .id ='column label')
df_na_neg = cbind(df_nas, df_neg)
df_na_neg = df_na_neg[,order(colnames(df_na_neg))]
df_na_neg
rm(list=ls())
#memory.limit(size = 50000)
## -----------------------------------------
### Paths
## -----------------------------------------
Drive <- file.path(gsub("[\\]", "/", gsub("Documents", "", Sys.getenv("HOME"))))
NuDir <- file.path(Drive, "Box", "NU-malaria-team")
NGDir <-file.path(NuDir, "data", "nigeria_dhs",  "data_analysis")
DataDir <-file.path(NGDir, "data")
ResultDir <-file.path(NGDir, "results")
DHSData <- file.path(DataDir, 'DHS')
DataIn <- file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates')
ifelse(!dir.exists(file.path(DataIn, "cleaned_cluster_covariates_all")),
dir.create(file.path(DataIn, "cleaned_cluster_covariates_all")), FALSE)
cleandatDir <- file.path(DataIn, 'cleaned_cluster_covariates_all')
buffer <- c('_1000m_|_2000m_|_3000m_|_4000m_',  '_0m_|_2000m_|_3000m_|_4000m_', '_0m_|_1000m_|_3000m_|_4000m_','_0m_|_1000m_|_2000m_|_4000m_', '_0m_|_1000m_|_2000m_|_3000m_')
buffer_label <- c('0m', '1000m', '2000m', '3000m', '4000m')
df_geo<- list()
for (i in 1:length(buffer)){
files <- list.files(path = file.path(DataIn, 'geospatial_covariates') , pattern = '.csv', full.names = TRUE, recursive = FALSE)
files<- files[-grep('pop_density_FB|secondary_vector', files)]
files <- files[-grep(buffer[[1]], files)]
df<-sapply(files, read.csv, simplify = F)
df <- df %>% map_if(~ all(c('hv001') %in% colnames(.x)), ~rename(., v001 = hv001))
df<- df[order(sapply(df,nrow),decreasing = T)]
df<- df %>% map_if(~ all(c('.id') %in% colnames(.x)),~dplyr::select(., -.id))
df<- df %>% map_if(~ all(c('month') %in% colnames(.x)),~dplyr::select(., -month))
df <- df %>%  purrr::reduce(left_join, by = c('dhs_year', 'v001')) %>%  mutate(dhs_year = as.character(dhs_year))
df_geo <- append(df_geo, list(df))
}
filenames <- c('0m', '1000m', '2000m', '3000m', '4000m')
for (i in 1:length(df_geo)){
write.csv(df_geo[[i]], paste0(cleandatDir, '/New_082321/all_geospatial_variables_urban_malaria_', filenames[[i]], '.csv'))
}
rm(list=ls())
#memory.limit(size = 50000)
# ----------------------------------------------------
### Directories
# ----------------------------------------------------
user = Sys.getenv("USERNAME")
Drive = file.path(gsub("[\\]", "/", gsub("Documents", "", Sys.getenv("HOME"))))
NuDir = file.path(Drive, "Box", "NU-malaria-team")
ProjectDir = file.path(NuDir, 'data', 'nigeria_dhs' , 'data_analysis')
DataDir = file.path(ProjectDir, "data")
DHSData = file.path(DataDir, 'DHS')
DataIn = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'DHS_survey_extract')
ResultDir =file.path(ProjectDir, "results", "research_plots")
HisDir =file.path(ResultDir, "histograms")
MapsDir = file.path(ResultDir, "maps")
CsvDir = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'cleaned_cluster_covariates_all', 'New_082321')
# ----------------------------------------------------
### Required functions and settings
## ----------------------------------------------------
source("./functions/descriptive_analysis_functions.R")
files = list.files(path = CsvDir, pattern = '.csv', full.names = TRUE, recursive = FALSE)
files = files[-grep('all_DHS_variables_urban', files)]
df_geo = sapply(files, read.csv, simplify = F)
#find the number of NAs per column in geospatial data
df_nas = df_geo %>%  map(~summarise_all(., funs(sum(is.na(.)))))
names(df_nas[[1]])<- gsub(pattern = '\\_0m$', replacement = '_nas', x = names(df_nas[[1]]))#remove _0m from the 0m buffer dataset
for(i in seq_along(df_nas)){
names(df_nas[[i]])<- names(df_nas[[1]])
}
df_nas = bind_rows(df_nas, .id ='column label')
#count the number of negatives per column in geospatial data
df_neg = df_geo %>%  map(~summarise_all(., funs(sum((.) < 0, na.rm=TRUE))))
names(df_neg[[1]])<- gsub(pattern = '\\_0m$', replacement = '_negs', x = names(df_neg[[1]]))#remove _0m from the 0m buffer dataset
for(i in seq_along(df_neg)){
names(df_neg[[i]])<- names(df_neg[[1]])
}
df_neg = bind_rows(df_neg, .id ='column label')
df_na_neg = cbind(df_nas, df_neg)
df_na_neg = df_na_neg[,order(colnames(df_na_neg))]
df_na_neg
df_sp
df_sp = data.frame(v001 = df_geo[[1]]$v001, dhs_year = df_geo[[1]]$dhs_year, elevation_1000m = df_geo[[2]]$elev_merit_1000m,
housing_2000_4000m = df_geo[[5]]$housing_2000_4000m,  housing_2015_4000m = df_geo[[5]]$housing_2015_4000m,
minutes_nearest_city_1000m = df_geo[[2]]$minutes_to_city_1000m, minutes_travel_metre_2015_1000m = df_geo[[2]]$minutes_travel_metre_2015_1000m,
minutes_travel_metre_2019_2000m = df_geo[[3]]$minutes_travel_metre_2019_2000m, minutes_walking_healthcare_2000m = df_geo[[3]]$minutes_walking_healthcare_2000m,
minutes_walking_metre_2000m = df_geo[[3]]$minutes_walking_metre_2000m, motorized_travel_healthcare_2019_2000m = df_geo[[3]]$motorized_travel_healthcare_2019_2000m,
pop_den_U5_FB_4000m = df_geo[[5]]$pop_den_U5_FB_4000m, pop_density_0m = df_geo[[1]]$pop_density_0m, precipitation_all_yrs_0m = df_geo[[1]]$prec_all_yrs_0m,
precipitation_0m = df_geo[[1]]$prec_0m, soil_wetness_0m = df_geo[[1]]$soil_wetness_0m, temp_all_years_0m = df_geo[[1]]$temp_all_yrs_0m,
temperature_0m = df_geo[[1]]$temp_all_yrs_0m, dist_water_bodies_0m = df_geo[[1]]$dist_water_bodies_0m, EVI_0m = df_geo[[1]]$EVI_0m)
View(df_geo)
df_sp = data.frame(v001 = df_geo[[1]]$v001, dhs_year = df_geo[[1]]$dhs_year)
View(df_sp)
df_sp = data.frame(v001 = df_geo[[1]]$v001, dhs_year = df_geo[[1]]$dhs_year, elevation_1000m = df_geo[[2]]$elev_merit_1000m,
housing_2000_4000m = df_geo[[5]]$housing_2000_4000m)
df_sp = data.frame(v001 = df_geo[[1]]$v001, dhs_year = df_geo[[1]]$dhs_year, elevation_1000m = df_geo[[2]]$elev_merit_1000m)
df_geo[[2]]$elev_merit_1000m
View(df_geo)
rm(list=ls())
#memory.limit(size = 50000)
## -----------------------------------------
### Paths
## -----------------------------------------
Drive <- file.path(gsub("[\\]", "/", gsub("Documents", "", Sys.getenv("HOME"))))
NuDir <- file.path(Drive, "Box", "NU-malaria-team")
NGDir <-file.path(NuDir, "data", "nigeria_dhs",  "data_analysis")
DataDir <-file.path(NGDir, "data")
ResultDir <-file.path(NGDir, "results")
DHSData <- file.path(DataDir, 'DHS')
DataIn <- file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates')
ifelse(!dir.exists(file.path(DataIn, "cleaned_cluster_covariates_all")),
dir.create(file.path(DataIn, "cleaned_cluster_covariates_all")), FALSE)
cleandatDir <- file.path(DataIn, 'cleaned_cluster_covariates_all')
buffer <- c('_1000m_|_2000m_|_3000m_|_4000m_',  '_0m_|_2000m_|_3000m_|_4000m_', '_0m_|_1000m_|_3000m_|_4000m_','_0m_|_1000m_|_2000m_|_4000m_', '_0m_|_1000m_|_2000m_|_3000m_')
buffer_label <- c('0m', '1000m', '2000m', '3000m', '4000m')
df_geo<- list()
for (i in 1:length(buffer)){
files <- list.files(path = file.path(DataIn, 'geospatial_covariates') , pattern = '.csv', full.names = TRUE, recursive = FALSE)
files<- files[-grep('pop_density_FB|secondary_vector', files)]
files <- files[-grep(buffer[[i]], files)]
df<-sapply(files, read.csv, simplify = F)
df <- df %>% map_if(~ all(c('hv001') %in% colnames(.x)), ~rename(., v001 = hv001))
df<- df[order(sapply(df,nrow),decreasing = T)]
df<- df %>% map_if(~ all(c('.id') %in% colnames(.x)),~dplyr::select(., -.id))
df<- df %>% map_if(~ all(c('month') %in% colnames(.x)),~dplyr::select(., -month))
df <- df %>%  purrr::reduce(left_join, by = c('dhs_year', 'v001')) %>%  mutate(dhs_year = as.character(dhs_year))
df_geo <- append(df_geo, list(df))
}
filenames <- c('0m', '1000m', '2000m', '3000m', '4000m')
for (i in 1:length(df_geo)){
write.csv(df_geo[[i]], paste0(cleandatDir, '/New_082321/all_geospatial_variables_urban_malaria_', filenames[[i]], '.csv'))
}
rm(list=ls())
#memory.limit(size = 50000)
# ----------------------------------------------------
### Directories
# ----------------------------------------------------
user = Sys.getenv("USERNAME")
Drive = file.path(gsub("[\\]", "/", gsub("Documents", "", Sys.getenv("HOME"))))
NuDir = file.path(Drive, "Box", "NU-malaria-team")
ProjectDir = file.path(NuDir, 'data', 'nigeria_dhs' , 'data_analysis')
DataDir = file.path(ProjectDir, "data")
DHSData = file.path(DataDir, 'DHS')
DataIn = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'DHS_survey_extract')
ResultDir =file.path(ProjectDir, "results", "research_plots")
HisDir =file.path(ResultDir, "histograms")
MapsDir = file.path(ResultDir, "maps")
CsvDir = file.path(DHSData, "Computed_cluster_information", 'urban_malaria_covariates', 'cleaned_cluster_covariates_all', 'New_082321')
# ----------------------------------------------------
### Required functions and settings
## ----------------------------------------------------
source("./functions/descriptive_analysis_functions.R")
files = list.files(path = CsvDir, pattern = '.csv', full.names = TRUE, recursive = FALSE)
files = files[-grep('all_DHS_variables_urban', files)]
df_geo = sapply(files, read.csv, simplify = F)
#find the number of NAs per column in geospatial data
df_nas = df_geo %>%  map(~summarise_all(., funs(sum(is.na(.)))))
names(df_nas[[1]])<- gsub(pattern = '\\_0m$', replacement = '_nas', x = names(df_nas[[1]]))#remove _0m from the 0m buffer dataset
for(i in seq_along(df_nas)){
names(df_nas[[i]])<- names(df_nas[[1]])
}
df_nas = bind_rows(df_nas, .id ='column label')
#count the number of negatives per column in geospatial data
df_neg = df_geo %>%  map(~summarise_all(., funs(sum((.) < 0, na.rm=TRUE))))
names(df_neg[[1]])<- gsub(pattern = '\\_0m$', replacement = '_negs', x = names(df_neg[[1]]))#remove _0m from the 0m buffer dataset
for(i in seq_along(df_neg)){
names(df_neg[[i]])<- names(df_neg[[1]])
}
df_neg = bind_rows(df_neg, .id ='column label')
df_na_neg = cbind(df_nas, df_neg)
df_na_neg = df_na_neg[,order(colnames(df_na_neg))]
df_na_neg
df_sp = data.frame(v001 = df_geo[[1]]$v001, dhs_year = df_geo[[1]]$dhs_year, elevation_1000m = df_geo[[2]]$elev_merit_1000m,
housing_2000_4000m = df_geo[[5]]$housing_2000_4000m,  housing_2015_4000m = df_geo[[5]]$housing_2015_4000m,
minutes_nearest_city_1000m = df_geo[[2]]$minutes_to_city_1000m, minutes_travel_metre_2015_1000m = df_geo[[2]]$minutes_travel_metre_2015_1000m,
minutes_travel_metre_2019_2000m = df_geo[[3]]$minutes_travel_metre_2019_2000m, minutes_walking_healthcare_2000m = df_geo[[3]]$minutes_walking_healthcare_2000m,
minutes_walking_metre_2000m = df_geo[[3]]$minutes_walking_metre_2000m, motorized_travel_healthcare_2019_2000m = df_geo[[3]]$motorized_travel_healthcare_2019_2000m,
pop_den_U5_FB_4000m = df_geo[[5]]$pop_den_U5_FB_4000m, pop_density_0m = df_geo[[1]]$pop_density_0m, precipitation_all_yrs_0m = df_geo[[1]]$prec_all_yrs_0m,
precipitation_0m = df_geo[[1]]$prec_0m, soil_wetness_0m = df_geo[[1]]$soil_wetness_0m, temp_all_years_0m = df_geo[[1]]$temp_all_yrs_0m,
temperature_0m = df_geo[[1]]$temp_all_yrs_0m, dist_water_bodies_0m = df_geo[[1]]$dist_water_bodies_0m, EVI_0m = df_geo[[1]]$EVI_0m)
View(df_sp)
for(i in 1:ncol(df_sp)){
df_sp[is.na(df_sp[,i]), i] = mean(x[,i], na.rm = TRUE)
}
for(i in 1:ncol(df_sp)){
df_sp[is.na(df_sp[,i]), i] = mean(df_sp[,i], na.rm = TRUE)
}
#correlation matrix
corr = round(cor(df_sp), 1)
# Compute a matrix of correlation p-values
p.mat = cor_pmat(df_sp)
p.mat
corrPlot= ggcorrplot(corr, lab=TRUE, legend.title = "Correlation coefficient")+
theme(panel.border = element_rect(colour = "black", fill=NA, size=0.9))
corrPlot
df_sp = data.frame(v001 = df_geo[[1]]$v001, dhs_year = df_geo[[1]]$dhs_year, elevation_1000m = df_geo[[2]]$elev_merit_1000m,
housing_2000_4000m = df_geo[[5]]$housing_2000_4000m,  housing_2015_4000m = df_geo[[5]]$housing_2015_4000m,
minutes_nearest_city_1000m = df_geo[[2]]$minutes_to_city_1000m, minutes_travel_metre_2015_1000m = df_geo[[2]]$minutes_travel_metre_2015_1000m,
minutes_travel_metre_2019_2000m = df_geo[[3]]$minutes_travel_metre_2019_2000m, minutes_walking_healthcare_2000m = df_geo[[3]]$minutes_walking_healthcare_2000m,
minutes_walking_metre_2000m = df_geo[[3]]$minutes_walking_metre_2000m, motorized_travel_healthcare_2019_2000m = df_geo[[3]]$motorized_travel_healthcare_2019_2000m,
pop_den_U5_FB_4000m = df_geo[[5]]$pop_den_U5_FB_4000m, pop_density_0m = df_geo[[1]]$pop_density_0m, precipitation_all_yrs_0m = df_geo[[1]]$prec_all_yrs_0m,
precipitation_0m = df_geo[[1]]$prec_0m, soil_wetness_0m = df_geo[[1]]$soil_wetness_0m, temp_all_years_0m = df_geo[[1]]$temp_all_yrs_0m,
temperature_0m = df_geo[[1]]$temp_all_yrs_0m, dist_water_bodies_0m = df_geo[[1]]$dist_water_bodies_0m, EVI_0m = df_geo[[1]]$EVI_0m)
df_sp = dhs %>% dplyr::select(-c(dhs_year, shstate, v001)) #removes categorical variables and malaria prevalence
#replace nas with their means
for(i in 1:ncol(df_sp)){
df_sp[is.na(df_sp[,i]), i] = mean(df_sp[,i], na.rm = TRUE)
}
#correlation matrix
corr = round(cor(df_sp), 1)
# Compute a matrix of correlation p-values
p.mat = cor_pmat(df_sp)
corrPlot= ggcorrplot(corr, lab=TRUE, legend.title = "Correlation coefficient")+
theme(panel.border = element_rect(colour = "black", fill=NA, size=0.9))
df_sp = data.frame(v001 = df_geo[[1]]$v001, dhs_year = df_geo[[1]]$dhs_year, elevation_1000m = df_geo[[2]]$elev_merit_1000m,
housing_2000_4000m = df_geo[[5]]$housing_2000_4000m,  housing_2015_4000m = df_geo[[5]]$housing_2015_4000m,
minutes_nearest_city_1000m = df_geo[[2]]$minutes_to_city_1000m, minutes_travel_metre_2015_1000m = df_geo[[2]]$minutes_travel_metre_2015_1000m,
minutes_travel_metre_2019_2000m = df_geo[[3]]$minutes_travel_metre_2019_2000m, minutes_walking_healthcare_2000m = df_geo[[3]]$minutes_walking_healthcare_2000m,
minutes_walking_metre_2000m = df_geo[[3]]$minutes_walking_metre_2000m, motorized_travel_healthcare_2019_2000m = df_geo[[3]]$motorized_travel_healthcare_2019_2000m,
pop_den_U5_FB_4000m = df_geo[[5]]$pop_den_U5_FB_4000m, pop_density_0m = df_geo[[1]]$pop_density_0m, precipitation_all_yrs_0m = df_geo[[1]]$prec_all_yrs_0m,
precipitation_0m = df_geo[[1]]$prec_0m, soil_wetness_0m = df_geo[[1]]$soil_wetness_0m, temp_all_years_0m = df_geo[[1]]$temp_all_yrs_0m,
temperature_0m = df_geo[[1]]$temp_all_yrs_0m, dist_water_bodies_0m = df_geo[[1]]$dist_water_bodies_0m, EVI_0m = df_geo[[1]]$EVI_0m)
df_sp = df_sp %>% dplyr::select(-c(dhs_year, shstate, v001)) #removes categorical variables and malaria prevalence
#replace nas with their means
for(i in 1:ncol(df_sp)){
df_sp[is.na(df_sp[,i]), i] = mean(df_sp[,i], na.rm = TRUE)
}
#correlation matrix
corr = round(cor(df_sp), 1)
# Compute a matrix of correlation p-values
p.mat = cor_pmat(df_sp)
corrPlot= ggcorrplot(corr, lab=TRUE, legend.title = "Correlation coefficient")+
theme(panel.border = element_rect(colour = "black", fill=NA, size=0.9))
df_sp = data.frame(v001 = df_geo[[1]]$v001, dhs_year = df_geo[[1]]$dhs_year, elevation_1000m = df_geo[[2]]$elev_merit_1000m,
housing_2000_4000m = df_geo[[5]]$housing_2000_4000m,  housing_2015_4000m = df_geo[[5]]$housing_2015_4000m,
minutes_nearest_city_1000m = df_geo[[2]]$minutes_to_city_1000m, minutes_travel_metre_2015_1000m = df_geo[[2]]$minutes_travel_metre_2015_1000m,
minutes_travel_metre_2019_2000m = df_geo[[3]]$minutes_travel_metre_2019_2000m, minutes_walking_healthcare_2000m = df_geo[[3]]$minutes_walking_healthcare_2000m,
minutes_walking_metre_2000m = df_geo[[3]]$minutes_walking_metre_2000m, motorized_travel_healthcare_2019_2000m = df_geo[[3]]$motorized_travel_healthcare_2019_2000m,
pop_den_U5_FB_4000m = df_geo[[5]]$pop_den_U5_FB_4000m, pop_density_0m = df_geo[[1]]$pop_density_0m, precipitation_all_yrs_0m = df_geo[[1]]$prec_all_yrs_0m,
precipitation_0m = df_geo[[1]]$prec_0m, soil_wetness_0m = df_geo[[1]]$soil_wetness_0m, temp_all_years_0m = df_geo[[1]]$temp_all_yrs_0m,
temperature_0m = df_geo[[1]]$temp_all_yrs_0m, dist_water_bodies_0m = df_geo[[1]]$dist_water_bodies_0m, EVI_0m = df_geo[[1]]$EVI_0m)
df_sp = df_sp %>% dplyr::select(-c(dhs_year, v001)) #removes categorical variables and malaria prevalence
#replace nas with their means
for(i in 1:ncol(df_sp)){
df_sp[is.na(df_sp[,i]), i] = mean(df_sp[,i], na.rm = TRUE)
}
#correlation matrix
corr = round(cor(df_sp), 1)
# Compute a matrix of correlation p-values
p.mat = cor_pmat(df_sp)
corrPlot= ggcorrplot(corr, lab=TRUE, legend.title = "Correlation coefficient")+
theme(panel.border = element_rect(colour = "black", fill=NA, size=0.9))
corrPlot
corrPlot
ggsave(paste0(ResultDir, '/updated_figures/', Sys.Date(), '_methods_figures_correlation_coefficients_geospatial.pdf'), corrPlot, width = 13, height = 9)
