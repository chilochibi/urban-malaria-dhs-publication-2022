map_lagos = dplyr::filter(map, (ADM1NAME %in% c('LAGOS')))
map_lagos
df_lagos = dplyr::filter(LGA_sf, (State %in% c('Lagos')))
map_lag = gmap_fun(df_lagos, map_lagos, labels=c('0 - 0.2', '0.3 - 0.4', '0.5 - 0.6', '0.7 - 0.8', '0.9 - 1.0', 'Missing data'),
map_lagos$positives_cut, 'Test positivity rate')
map_lag
map_lag = gmap_fun(df_lagos, map_lagos,
map_lagos$positives_cut, 'Test positivity rate')
df_lagos = dplyr::filter(LGA_sf, (State %in% c('Lagos')))
map_lag = gmap_fun(df_lagos, map_lagos, labels=c('0 - 0.1', '0.15 - 0.2', '0.25 - 0.3', '0.4 - 0.6', '0.8 - 1.0', 'Missing data'),
map_lagos$positives_cut, 'Test positivity rate')
map_lag
map_lagos$positives_cut
View(gmap_fun)
gmap_fun <- function(polygon_name, point_data, labels, fill, legend_title){
ggplot(polygon_name) +
geom_sf(color='lightgrey')+
geom_point(data = point_data,
aes(fill=fill,  geometry = geometry),
stat = "sf_coordinates", alpha = 0.45, size=3, shape=21
) +
viridis::scale_fill_viridis(option='C', discrete=TRUE, labels=labels, na.value ='grey', limits=c('[0,0.1]', '(0.15,0.2]', '(0.25,0.3]', '(0.4,0.6]', '(0.8,1]', NA)) +
map_theme() +
guides(fill = guide_legend(title=legend_title, override.aes = list(size = 5)))+
xlab("")+
ylab("")
}
map_lag = gmap_fun(df_lagos, map_lagos, labels=c('0 - 0.1', '0.15 - 0.2', '0.25 - 0.3', '0.4 - 0.6', '0.8 - 1.0', 'Missing data'),
map_lagos$positives_cut, 'Test positivity rate')
map_lag
df_lagos
map_lag + geom_text_repel(
data = df_lagos,
aes(label = LGA, geometry = geometry),color ='black',
stat = "sf_coordinates",
min.segment.length = 0, size = 3, force = 1)+ #geom_sf_text(aes(label=name_long))+
xlab('')+
ylab('')
View(map_lagos)
dhs
## ----------------------------------------------------------------
### Creating analysis data
## ----------------------------------------------------------------
#read in dhs file
dhs = read.csv(file.path(CsvDir, "all_DHS_variables_urban_malaria.csv"), header = T, sep = ',') %>% dplyr::select(-X)
dhs
map = sf_all %>% left_join(dhs, by=c('v001', 'DHSYEAR'))  %>%  filter(LATNUM != 0)
#data wrangling
dhs = dhs %>%  dplyr::select(v001, positives, child_6_59_tested_malaria, DHSYEAR=dhs_year, net_use, net_use_child)
map = sf_all %>% left_join(dhs, by=c('v001', 'DHSYEAR'))  %>%  filter(LATNUM != 0)
map
map$net_cut = cut(map$net_prop, breaks=c(0,10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100), include.lowest = TRUE)
map$net_cut = cut(map$net_use, breaks=c(0,10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100), include.lowest = TRUE)
gmap_fun <- function(polygon_name, point_data, labels, fill, legend_title){
ggplot(polygon_name) +
geom_sf(color='lightgrey')+
geom_point(data = point_data,
aes(fill=fill,  geometry = geometry),
stat = "sf_coordinates", alpha = 0.45, size=3, shape=21
) +
viridis::scale_fill_viridis(option='C', discrete=TRUE, labels=labels, na.value ='grey') +
map_theme() +
guides(fill = guide_legend(title=legend_title, override.aes = list(size = 5)))+
xlab("")+
ylab("")
}
map_lagos
map$net_cut = cut(map$net_use, breaks=c(0,10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100), include.lowest = TRUE)
map
map_lagos = dplyr::filter(map, (ADM1NAME %in% c('LAGOS')))
map_lag = gmap_fun(df_lagos, map_lagos, labels=c('0 - 10', '15 - 20', '25 - 30', '40 - 50', '60 - 70', '80 - 90', '>=100'),
map_lagos$net_cut, 'net use rate')
map_lag
map_lag + geom_text_repel(
data = df_lagos,
aes(label = LGA, geometry = geometry),color ='black',
stat = "sf_coordinates",
min.segment.length = 0, size = 3, force = 1)+ #geom_sf_text(aes(label=name_long))+
xlab('')+
ylab('')
View(map_lagos)
map_lagos
map$net_cut
map_lag = gmap_fun(df_lagos, map_lagos, labels=c('0 - 10','11-15', '16 - 20', '21 - 25', '26 - 30', '31 - 40', '41 - 50', '51 - 60', '61 - 70', '71 - 80', '81 - 90', '91 - 100'),
map_lagos$net_cut, 'net use rate')
map_lag + geom_text_repel(
data = df_lagos,
aes(label = LGA, geometry = geometry),color ='black',
stat = "sf_coordinates",
min.segment.length = 0, size = 3, force = 1)+ #geom_sf_text(aes(label=name_long))+
xlab('')+
ylab('')
map_lagos
View(map_lag)
summary(map_lagos$net_use)
rm(list=ls())
## -----------------------------------------
### Paths
## -----------------------------------------
Drive <- file.path(gsub("[\\]", "/", gsub("Documents", "", Sys.getenv("HOME"))))
NuDir <- file.path(Drive, "Box", "NU-malaria-team")
NGDir <-file.path(NuDir, "data", "nigeria_dhs",  "data_analysis")
DataDir <-file.path(NGDir, "data")
ResultDir <-file.path(NGDir, "results", "research_plots", 'updated_figures')
RastDir <- file.path(DataDir, "Raster_files")
#sample size calculations
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4)
RSE = c(0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 3
N = 15500
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
View(sample_info)
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4)
RSE = c(0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 5
N = 15500
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.6)
RSE = c(0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 3
N = 15500
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
m(list=ls())
sample_info=list()
prop = c(0.01, 0.02, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.6)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 3
N = 15500
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
View(sample_info)
#sample size calculations
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.6)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 0.5
N = 15500
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
View(sample_info)
#sample size calculations
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.6)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 3
N = 15500
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
View(sample_info)
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.6)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 5
N = 4700
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02,0.04, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.6)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 5
N = 4700
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02,0.04, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.6, 0.7)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 5
N = 4700
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
#sample size calculations
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02,0.04, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.6, 0.7)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 3
N = 4700
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
#sample size calculations
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02,0.04, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.6, 0.7)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 0.5
N = 4700
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02,0.04, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.6, 0.7)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 0.3
N = 4700
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02,0.04, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 0.3
N = 4700
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
#sample size calculations
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02,0.04, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 0.3
N = 15500
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
prop = c(0.01, 0.02,0.04, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 0.3
N = 15500
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
#sample size calculations
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02,0.04, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 0.3
N = 15500
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
View(sample_info)
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02,0.04, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 1
N = 15500
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
#sample size calculations
rm(list=ls())
sample_info=list()
prop = c(0.01, 0.02,0.04, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7)
RSE = c(0.05, 0.1, 0.15, 0.2, 0.3)
for (i in 1:length(prop)){
for (r in 1:length(RSE)){
E_SE = RSE[[r]] * prop[[i]]
UCL = prop[[i]] + (2 * E_SE)
LCL = prop[[i]] - (2 * E_SE)
Deft_square = 1.4**2
R_i = 0.80
R_h = 0.75
d = 0.8
N = 4700
n = Deft_square * (((1/prop[[i]] - 1)/RSE[[r]]**2)/(R_i * R_h* d))
n_corrected =  n/(1 + n/N)
t_sample = n_corrected
all_data = data.frame(prop=prop[[i]], RSE=RSE[[r]], sample = n, corrected_sample=n_corrected, total_sample=t_sample, LCL, UCL)
sample_info=append(sample_info, list(all_data))
}
}
sample_info=plyr::ldply(sample_info)
